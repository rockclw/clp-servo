<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="IPy0;*)$=F2Ky-`0+%m8" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="qu;M92ok-w91zj+68;yq" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace clpRobotArmServo{" line1="    export enum Servos{" line2="        baseServo," line3="        clawTurnServo," line4="        clawServo" line5="    }" line6="" line7="    function toServo(servo: Servos): robotbit.Servos{" line8="        switch (servo){" line9="            case Servos.baseServo: return robotbit.Servos.S1;" line10="            case Servos.clawTurnServo: return robotbit.Servos.S2;" line11="            default: return robotbit.Servos.S3;" line12="        }" line13="    }" line14="    " line15="    export enum direction{" line16="        anticlockwise = 0," line17="        clockwise = 1" line18="    }" line19="    " line20="    function toIndex(servo: Servos): number{" line21="        switch(servo){" line22="        " line23="            case Servos.baseServo: return 0;" line24="            case Servos.clawTurnServo: return 1;" line25="            case Servos.clawServo: return 2;" line26="            default: return 3;" line27="        }" line28="    }" line29="    " line30="    let ServoAngle:number[] = [0,0,0];" line31="    let ServoMaxAngle:number[] = [145,180,80];" line32="    " line33="    function setDir(dir: direction): number{" line34="        if (dir == direction.clockwise){" line35="            return 1;" line36="        }" line37="            return -1;" line38="    }" line39="    " line40="    function getFinalAngle(servo: Servos, degree: number, dir: direction): number{" line41="    " line42="        let deg = ServoAngle[toIndex(servo)] +  degree * setDir(dir);" line43="        if (deg &gt; ServoMaxAngle[servo]){" line44="            return ServoMaxAngle[servo];" line45="        }" line46="        else if (deg &lt; 0){" line47="            return 0;" line48="        }" line49="        return deg;" line50="    }" line51="    " line52="    //% blockId=servo_turn block=&quot;Servo|%servo| turn |%dir by |%degree degree&quot;" line53="    //% degree.min=0 degree.max=180" line54="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=3" line55="    export function turn(servo: Servos, dir: direction, degree: number): void {" line56="        ServoAngle[ServoAngle[toIndex(servo)]] = getFinalAngle(servo, degree, dir);" line57="        robotbit.Servo(toServo(servo), ServoAngle[servo]);" line58="    }" line59="    " line60="    //% blockId=servo_showangle block=&quot;Servo|%servo| show angle&quot;" line61="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=3" line62="    export function showAngle(servo: Servos): void{" line63="        basic.showNumber(ServoAngle[toIndex(servo)]);" line64="    }" line65="    " line66="    //% blockId=servo_getangle block=&quot;angle of Servo|%servo|&quot;" line67="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=3" line68="    export function getAngle(servo: Servos): number{" line69="        return ServoAngle[toIndex(servo)];" line70="    }" line71="}" numlines="72"></mutation></block></statement></block></xml>